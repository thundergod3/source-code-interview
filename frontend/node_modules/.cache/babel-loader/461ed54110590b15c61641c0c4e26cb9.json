{"ast":null,"code":"var _jsxFileName = \"/Users/phanhuycong/Public/Code/Interview Test /source_code/interview/frontend/src/HookDebug.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HookDebug = () => {\n  _s();\n\n  const [userName, setUserName] = useState({\n    name: \"John\"\n  });\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 1);\n  }, [userName.name]);\n  const changeCount = useCallback(() => {// Problem 1: Count up number without changing the useCallback dependency\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: changeCount,\n      children: \"Count me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setUserName({\n        name: \"KEN\"\n      }),\n      children: userName.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HookDebug, \"38ryKSWnUmVwLvwZeVTlWRfUF2Q=\");\n\n_c = HookDebug;\nexport default HookDebug;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookDebug\");","map":{"version":3,"sources":["/Users/phanhuycong/Public/Code/Interview Test /source_code/interview/frontend/src/HookDebug.js"],"names":["React","useEffect","useState","useCallback","HookDebug","userName","setUserName","name","count","setCount","changeCount"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAFQ,EAEN,CAACH,QAAQ,CAACE,IAAV,CAFM,CAAT;AAIA,QAAMG,WAAW,GAAGP,WAAW,CAAC,MAAM,CACpC;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACE;AAAA,4BACE;AAAA,gBAAMK;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,OAAO,EAAEE,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAK,MAAA,OAAO,EAAE,MAAMJ,WAAW,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAA/B;AAAA,gBAAmDF,QAAQ,CAACE;AAA5D;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAvBD;;GAAMH,S;;KAAAA,S;AAyBN,eAAeA,SAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState, useCallback } from \"react\";\n\nconst HookDebug = () => {\n  const [userName, setUserName] = useState({ name: \"John\" });\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    setCount(count + 1);\n  }, [userName.name]);\n\n  const changeCount = useCallback(() => {\n    // Problem 1: Count up number without changing the useCallback dependency\n  }, []);\n\n  return (\n    <div>\n      <div>{count}</div>\n      <div onClick={changeCount}>Count me</div>\n\n      {/* Problem 2 : click username only count up the number 1 time\n          Expect: Count the number up eveytime click username\n       */}\n      <div onClick={() => setUserName({ name: \"KEN\" })}>{userName.name}</div>\n    </div>\n  );\n};\n\nexport default HookDebug;\n"]},"metadata":{},"sourceType":"module"}